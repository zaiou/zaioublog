<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/data/mongo
        http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
        http://code.alibabatech.com/schema/dubbo
        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- 自动扫描包中的bean -->
    <context:component-scan base-package="com.lb.*"/>
    <!-- enable autowire -->

    <!--&lt;!&ndash; 启用缓存注解开关 &ndash;&gt; 1111111111111111111111111111-->
    <!--<cache:annotation-driven cache-manager="ehRedisCacheManager"/>-->

    <context:annotation-config/>

    <!--配置数据源属性文件 -->
    <context:property-placeholder location="classpath:properties/jdbc.properties"/>
    <!-- enable transaction demarcation with annotations -->

    <tx:annotation-driven/>

    <!-- 支持异步方法执行 -->
    <task:annotation-driven executor="annotationExecutor"/>
    <!-- 支持 @Async 注解 -->
    <task:executor id="annotationExecutor" pool-size="100"/>

    <!-- 扫描mapper接口（即dao），Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.lb.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- sql sessionfactoty-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置扫描Domain的包路径 -->
        <property name="typeAliasesPackage" value="com.lb.model"/>
        <!-- 配置mybatis配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 配置扫描Mapper XML的位置 -->
        <property name="mapperLocations">
            <array>
                <value>classpath:mapper/*.xml</value>
            </array>
        </property>
    </bean>


    <!--&lt;!&ndash; 数据库定时备份服务  start&ndash;&gt;   111111111111111111111-->
    <!--&lt;!&ndash; 定义调用对象和调用对象的方法 &ndash;&gt;-->
    <!--<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="mysqlService"/>-->
        <!--<property name="targetMethod" value="exportDataBase"/>-->
    <!--</bean>-->
    <!--<bean id="quartzjob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="jmxclient"/>-->
        <!--<property name="targetMethod" value="quartzjob"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash;定义触发时间  &ndash;&gt;-->
    <!--<bean id="myTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="jobDetail"/>-->
        <!--&lt;!&ndash; cron表达式 &ndash;&gt;-->
        <!--<property name="cronExpression" value="0 59 2 ? * FRI"/>-->
    <!--</bean>-->
    <!--<bean id="quartz_trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="quartzjob"/>-->
        <!--<property name="cronExpression" value="* * * * * ?"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 &ndash;&gt;-->
    <!--<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
        <!--<property name="triggers">-->
            <!--<list>-->
                <!--<ref bean="myTrigger"/>-->
                <!--<ref bean="quartz_trigger"/>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 数据库定时备份服务  end &ndash;&gt;-->

    <!--&lt;!&ndash;druid&ndash;&gt; 11111111111111111111111111111111-->
    <!--<bean id="druid-stat-interceptor"-->
          <!--class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"-->
          <!--scope="prototype">-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com.lb.service.*</value>-->
                <!--<value>com.lb.mapper.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!--<aop:config>-->
        <!--&lt;!&ndash;pointcut-ref="druid-stat-pointcut"在idea中报Cannot resolve Spring Pointcut ‘druid-stat-pointcut‘  不用管它&ndash;&gt;-->
        <!--<aop:advisor advice-ref="druid-stat-interceptor"-->
                     <!--pointcut-ref="druid-stat-pointcut"/>-->
    <!--</aop:config>-->
    <!--&lt;!&ndash;druid end&ndash;&gt;-->

    <!--&lt;!&ndash;ehcache start&ndash;&gt;  111111111111111111111111111-->
    <!--&lt;!&ndash; myCache 操作对象 &ndash;&gt;-->
    <!--<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
        <!--<property name="configLocation" value="classpath:ehcache.xml"/>-->
        <!--&lt;!&ndash;true:单例，一个cacheManager对象共享；false：多个对象独立 &ndash;&gt;-->
        <!--<property name="shared" value="true"/>-->
        <!--<property name="cacheManagerName" value="cacheManagerFactory"/>-->
    <!--</bean>-->

    <!--<bean id="ehCacheCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">-->
        <!--<property name="cacheManager" ref="cacheManagerFactory"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; myCache 操作对象 &ndash;&gt;-->
    <!--<bean id="myCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">-->
        <!--&lt;!&ndash; cacheName对应ehcache.xml中的cache name="myCache" &ndash;&gt;-->
        <!--<property name="cacheName" value="myCache"/>-->
        <!--<property name="cacheManager" ref="cacheManagerFactory"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash;ehcache end&ndash;&gt;-->

    <!--&lt;!&ndash;redis cache start&ndash;&gt; 1111111111111111-->
    <!--<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
        <!--<constructor-arg name="redisOperations" ref="redisTemplate"/>-->
        <!--<property name="defaultExpiration" value="${redis.defaultExpiration}"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash;redis cache end&ndash;&gt;-->

    <!--&lt;!&ndash; 多缓存配置开始 &ndash;&gt; 111111111111111111-->
    <!--&lt;!&ndash; 自定义ehcache+redis &ndash;&gt;-->
    <!--<bean id="ehRedisCacheManager" class="org.springframework.cache.support.SimpleCacheManager">-->
        <!--<property name="caches">-->
            <!--<set>-->
                <!--<bean id="ehRedisCache" class="com.myblog.cache.EhRedisCache">-->
                    <!--&lt;!&ndash;<property name="redisTemplate" ref="redisTemplate"/>&ndash;&gt;-->
                    <!--&lt;!&ndash;<property name="ehCache" ref="myCache"/>&ndash;&gt;-->
                    <!--<property name="name" value="myCache"/>-->
                    <!--&lt;!&ndash; <property name="liveTime" value="3600"/> &ndash;&gt;-->
                <!--</bean>-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 多缓存配置结束 &ndash;&gt;-->


    <!-- 事务管理（transaction manager） -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- Default bean name is 'mongo' 2222222222222222222222 -->
    <!--<mongo:db-factory id="mongoDbFactory"-->
    <!--host="${mongo.host}"-->
    <!--port="${mongo.port}"/>-->
    <!--<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">-->
    <!--<constructor-arg name="mongoDbFactory" ref="mongoDbFactory"/>-->
    <!--</bean>-->
    <!-- 定义mongo对象，对应的是mongodb官方jar包中的Mongo，replica-set设置集群副本的ip地址和端口 -->
    <!--<mongo:mongo-client id="mongoClient" host="${mongo.host}" port="${mongo.port}" credentials="${mongo.user}:${mongo.pwd}@${mongo.defaultDbName}">-->

    <!--<mongo:mongo-client id="mongoClient" host="${mongo.host}" port="${mongo.port}">  11111111111111111111-->
        <!--<mongo:client-options-->
                <!--connections-per-host="${mongo.connectionsPerHost}"-->
                <!--min-connections-per-host="${mongo.minConnectionsPerHost}"-->
                <!--threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"-->
                <!--connect-timeout="${mongo.connectTimeout}"-->
                <!--max-wait-time="${mongo.maxWaitTime}"-->
                <!--socket-keep-alive="${mongo.socketKeepAlive}"-->
                <!--socket-timeout="${mongo.socketTimeout}"-->
        <!--/>-->
    <!--</mongo:mongo-client>-->

    <!--&lt;!&ndash; dbname="${mongo.defaultDbName}" host="${mongo.host}"-->
                      <!--port="${mongo.port}" username="${mongo.user}" password="${mongo.pwd}"-->
                      <!--mongo-ref="mongoClient" &ndash;&gt;-->
    <!--<mongo:db-factory id="mongoDbFactory"-->
                      <!--dbname="${mongo.defaultDbName}"-->
                      <!--mongo-ref="mongoClient"/>-->

    <!--&lt;!&ndash; 1.Spring提供的mongodb操作模板&ndash;&gt;-->
    <!--&lt;!&ndash;<mongo:template id="mongoTemplate" db-factory-ref="mongoDbFactory" write-concern="NORMAL"/>&ndash;&gt;-->
    <!--&lt;!&ndash; 2.Spring提供的mongodb操作模板&ndash;&gt;-->
    <!--<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">-->
        <!--<constructor-arg ref="mongoDbFactory"/>-->
    <!--</bean>-->


    <!--&lt;!&ndash; redis &ndash;&gt; 11111111111111111111111111-->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="maxTotal" value="${maxTotal}"/>-->
        <!--<property name="maxIdle" value="${maxIdle}"/>-->
        <!--<property name="minIdle" value="${minIdle}"/>-->
        <!--<property name="maxWaitMillis" value="15000"/>-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000"/>-->
        <!--<property name="numTestsPerEvictionRun" value="3"/>-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000"/>-->
        <!--<property name="testOnBorrow" value="true"/>-->
        <!--<property name="testOnReturn" value="true"/>-->
        <!--<property name="testWhileIdle" value="true"/>-->
    <!--</bean>-->

    <!--<bean id="jedisConnectionFactory"-->
          <!--class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<property name="hostName" value="${host}"/>-->
        <!--<property name="port" value="${port}"/>-->
        <!--<property name="password" value="${password}"/>-->
        <!--<property name="database" value="${redis.default.db}"/>-->
        <!--<property name="timeout" value="${timeout}"/>-->
        <!--<property name="poolConfig" ref="jedisPoolConfig"/>-->
        <!--<property name="usePool" value="true"/>-->
    <!--</bean>-->

    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
        <!--&lt;!&ndash; 序列化方式 建议key/hashKey采用StringRedisSerializer。 &ndash;&gt;-->
        <!--<property name="keySerializer">-->
            <!--<bean-->
                    <!--class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean-->
                    <!--class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean-->
                    <!--class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashValueSerializer">-->
            <!--<bean-->
                    <!--class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 将session放入redis &ndash;&gt;-->
    <!--<bean id="redisHttpSessionConfiguration"-->
          <!--class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">-->
        <!--<property name="maxInactiveIntervalInSeconds" value="1800"/>-->
    <!--</bean>-->


    <!--&lt;!&ndash; 配置事务通知属性 &ndash;&gt;  111111111111111111111111111-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--&lt;!&ndash; 定义事务传播属性 &ndash;&gt;-->
        <!--<tx:attributes>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"/>-->
            <!--<tx:method name="edit*" propagation="REQUIRED"/>-->
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"/>-->
            <!--<tx:method name="new*" propagation="REQUIRED"/>-->
            <!--<tx:method name="set*" propagation="REQUIRED"/>-->
            <!--<tx:method name="remove*" propagation="REQUIRED"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
            <!--<tx:method name="change*" propagation="REQUIRED"/>-->
            <!--<tx:method name="check*" propagation="REQUIRED"/>-->
            <!--&lt;!&ndash;<tx:method name="get*" propagation="REQUIRED" read-only="true"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="find*" propagation="REQUIRED" read-only="true"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="load*" propagation="REQUIRED" read-only="true"/>&ndash;&gt;-->
            <!--&lt;!&ndash;<tx:method name="*" propagation="REQUIRED" read-only="true"/>&ndash;&gt;-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash; 配置事务切面 &ndash;&gt;-->
    <!--<aop:config proxy-target-class="true">-->
        <!--<aop:pointcut id="pointCut" expression="execution(* com.lb.service.*.*(..))"/>-->
        <!--<aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut"/>-->
    <!--</aop:config>-->
    <!--&lt;!&ndash;httpclient配置&ndash;&gt; 1111111111111111111111111111111111111-->
    <!--<import resource="spring/bean-httpclient.xml"/>-->
    <!--&lt;!&ndash;spring rabbitmq配置&ndash;&gt;-->
    <!--<import resource="spring/rabbitmq.xml"/>-->
    <!--&lt;!&ndash;websocket&ndash;&gt;-->
    <!--<import resource="spring/websocket.xml"/>-->
    <!--&lt;!&ndash;kafka&ndash;&gt;-->
    <!--<import resource="spring/kafka-consumer.xml"/>-->

    <!--<bean id="myStatLogger" class="com.myblog.druid.MyStatLogger"/>-->
    <!--&lt;!&ndash;dubbo&ndash;&gt;-->
    <!--<dubbo:application name="demo-consumer"/>-->
    <!--<dubbo:registry address="${zookeeper.url}" check="false"/>-->
    <!--<dubbo:reference id="demoService" interface="com.myblog.demo.DemoService" check="false"/>-->
    <!--<dubbo:reference id="dubboService" interface="com.myblog.dubbo.DubboService" check="false"/>-->


    <!--数据源-->
    <beans profile="develop">
        <!-- 配置数据源，使用阿里巴巴连接池Druid -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <property name="url" value="${jdbc.url_dev}"/>
            <property name="username" value="${jdbc.username_dev}"/>
            <property name="password" value="${jdbc.password_dev}"/>
            <!--配置这些才能使用druid监控-->
            <!-- 配置初始化大小、最小、最大 -->
            <property name="initialSize" value="1"/>
            <property name="minIdle" value="1"/>
            <property name="maxActive" value="20"/>
            <!-- 配置获取连接等待超时的时间 -->
            <property name="maxWait" value="60000"/>

            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="60000"/>

            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="300000"/>

            <property name="validationQuery" value="SELECT 'x'"/>
            <property name="testWhileIdle" value="true"/>
            <property name="testOnBorrow" value="false"/>
            <property name="testOnReturn" value="false"/>

            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
            <property name="poolPreparedStatements" value="true"/>
            <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

            <!--保存Druid的监控记录-->
            <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
            <!--<property name="filters" value="stat"/> 1111111111111111111111-->
            <!--<property name="timeBetweenLogStatsMillis" value="1000"/>-->
            <!--<property name="statLogger" ref="myStatLogger"/> 111111111111111111111111111-->
        </bean>
    </beans>
    <beans profile="product">
        <!-- 配置数据源，使用阿里巴巴连接池Druid -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <property name="url" value="${jdbc.url_pro}"/>
            <property name="username" value="${jdbc.username_pro}"/>
            <property name="password" value="${jdbc.password_pro}"/>
            <!--配置这些才能使用druid监控-->
            <!-- 配置初始化大小、最小、最大 -->
            <property name="initialSize" value="1"/>
            <property name="minIdle" value="1"/>
            <property name="maxActive" value="20"/>
            <!-- 配置获取连接等待超时的时间 -->
            <property name="maxWait" value="60000"/>

            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
            <property name="timeBetweenEvictionRunsMillis" value="60000"/>

            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
            <property name="minEvictableIdleTimeMillis" value="300000"/>

            <property name="validationQuery" value="SELECT 'x'"/>
            <property name="testWhileIdle" value="true"/>
            <property name="testOnBorrow" value="false"/>
            <property name="testOnReturn" value="false"/>

            <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
            <!--<property name="poolPreparedStatements" value="true"/>-->
            <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>-->

            <!--保存Druid的监控记录-->
            <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
            <!--<property name="filters" value="stat"/>-->
            <!--<property name="timeBetweenLogStatsMillis" value="1000"/>-->
            <!--<property name="statLogger" ref="myStatLogger"/> -->
        </bean>
    </beans>
</beans>